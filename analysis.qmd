---
title: "Microbiome Data Analysis"
author: "Daniel Quiroz"
format: gfm
editor: visual
execute:
  cache: false
---

Analysis pipeline base on this repository: [Bacteria Ark](https://gitlab.com/DanielQuiroz97/bacteria_ark/-/blob/master/CAYAMBE/Year%201/Analisis_final.Rmd)

# Importing Libraries

```{r message=FALSE, warning=FALSE, paged.print=FALSE}
library(phyloseq)
library(tidyverse)
library(microbiome)
library(ggpubr)
library(ggsci)
library(ranacapa)
library(psadd)
library(DESeq2)
library(vegan)
```

# Importing data

## Importing raw data

```{r message=FALSE, warning=FALSE}
# Tax table
tax_file <- read_tsv("Data/asv-taxonomy-mapping.tsv")

# ASV table
asv_count <- read_tsv("Data/asvtable-processed-absolute.tsv")

# Metadata
micro_metadata <- read.csv("Data/sample-metadata.csv", stringsAsFactors = T)
```

## Modifying tables fro phyloseq

```{r}
#ASV table
asv_names <- asv_count$asv
asv_count <- asv_count %>% select(-asv) 
rownames(asv_count) <- asv_names 

ASV <- otu_table(as.matrix(asv_count), taxa_are_rows = T)

# Metadata
micro_metadata <- as.data.frame(micro_metadata)
rownames(micro_metadata) <- micro_metadata$NAME

SAMPLE <- sample_data(micro_metadata)
```

## Separating Tax single column into multiple column

```{r}
# tax cleaning
# https://www.yanh.org/2021/01/01/microbiome-r/

# clean the taxonomy, Greengenes format
tax <- tax_file %>%
  select(tax) %>% 
  separate(tax, c("Kingdom", "Phylum", "Class", "Order",
                  "Family", "Genus", "Species"), ";") %>% 
  mutate_all(str_sub, start = 4, end = -4) 

tax <- replace(tax, tax == "", "Unclassified")
rownames(tax) <- tax_file$asv

TAX <- tax_table(as.matrix(tax))
```

## Creating a phyloseq object

```{r}
floral_microbiome_raw <- phyloseq(ASV, TAX, SAMPLE)
floral_microbiome_raw
```

-   4256 taxa
-   35 samples
-   29 variables in metadata

# Filtering data

## Removing Unclassified

### Unclassified at Kindom level and Archea ASV

```{r}
floral_micro_filter <- subset_taxa(floral_microbiome_raw,
                                   Kingdom != "Unclassified" & Kingdom != "Archaea")
floral_micro_filter
```

We remove 3 taxa that are either *Unclassified* or *Archaea*

### Removing cloroplast

```{r}
floral_micro_filter <- subset_taxa(floral_micro_filter,
                                   Order != "Chloropl")
floral_micro_filter
```

We removed 53 ASV assigned as *Chloroplast* at the Order level

### Unclassified at Phylum level

```{r}
floral_micro_filter <- subset_taxa(floral_micro_filter,
                                   Phylum != "Unclassified")
floral_micro_filter
```

# Basis Read info

## Sequencing depth

```{r}
# Sequencing depth
SeqDepth = colSums(otu_table(floral_micro_filter))

# Add depth to the metadata
sample_data(floral_micro_filter)$SeqDepth <- SeqDepth

seq_depth_plot <- meta(floral_micro_filter) %>% 
  ggplot(aes(NAME, SeqDepth,fill = factor(Treatment))) +
  geom_col() + theme_classic() + scale_fill_cosmic() + 
  rotate_x_text() + 
  labs(fill = "Treatment\nFertilizer (ppm)",
       x = "Sample Name", y = "Secuencing Depth",
       title = "Secuending depth per sample grouped by Time") +
  facet_wrap("Time", scales = "free_x") 
seq_depth_plot
```

```{r eval=FALSE, include=FALSE}
ggsave(filename = "SequencingDepth.jpg", path = "Figures/jpeg", 
       plot = seq_depth_plot, dpi = 600, width = 7, height = 4, units = "in")
```

## Removing singletons

```{r}
#checking for singletons
sum(taxa_sums(floral_micro_filter) == 1)
```

6 ASV with only 1 count, these are considered chimeric and therefore, are removed

```{r}
floral_micro_filter <- prune_taxa(taxa_sums(floral_micro_filter) > 5,
                                  floral_micro_filter)
floral_micro_filter
```

## Kronas plot

```{r eval=FALSE, include=TRUE}
# Kronas per sample
plot_krona(physeq = floral_micro_filter,
           output = "Figures/Kronas/per_sample",
           variable = "NAME")

# Per treatment
plot_krona(physeq = floral_micro_filter,
           output = "Figures/Kronas/per_treatment",
           variable = "Treatment")

# Per time
plot_krona(physeq = floral_micro_filter,
           output = "Figures/Kronas/per_time",
           variable = "Time")
```

## Rarefraction curves

```{r  message=FALSE, warning=FALSE}
set.seed(2023)

plt_rarefraction <- ggrare(floral_micro_filter, step = 1000, 
                           label = "NAME", se = F) +
  theme_classic() + 
  labs(title = "Rarefraction curves per sample")
```

```{r eval=FALSE, include=FALSE}
ggsave(filename = "RarefractionCurves.jpg", path = "Figures/jpeg", 
       plot = plt_rarefraction, dpi = 600, width = 6, height = 5, units = "in")
```

## Relative Barchar

### Phyla level

```{r warning=FALSE, message=FALSE}
# Calculate relative abundances
floral_micro_rel <- transform_sample_counts(floral_micro_filter,
                                            function(x) x/sum(x)*100)

# Agglomerate taxa genus 
floral_glom_fl <- tax_glom(floral_micro_rel, taxrank = "Family", NArm = FALSE)
floral_glom_melt_fl <- psmelt(floral_glom_fl)
floral_glom_melt_fl$Family <- as.character(floral_glom_melt_fl$Family)

# Calculating 
floral_gm_sum_fl <- floral_glom_melt_fl %>% 
  group_by(NAME, Family, Treatment) %>% 
  summarise(Abundance = sum(Abundance))

floral_gm_sum_fl <- floral_gm_sum_fl %>% 
  mutate(Treatment = factor(Treatment, levels = c(25, 100, 200) )) %>% 
  mutate(Family = case_when(Abundance < 5 ~ "< 5%",
                           TRUE ~ Family) )

#ggplot
rel_abundance_plot <- ggplot(floral_gm_sum_fl,
                             aes(NAME, Abundance, fill = Family) ) +
  geom_bar(stat = "identity") + facet_wrap("Treatment", scales = "free_x") +
  theme_classic() + rotate_x_text() + scale_fill_aaas()  +
  labs(x = "Sample Name")
rel_abundance_plot
```

```{r eval = FALSE, include=FALSE}
ggsave(filename = "RelativeAbundance.jpg", path = "Figures/jpeg", 
       plot = rel_abundance_plot, dpi = 600, width = 7, height = 5, units = "in")
```

### Genus level

```{r warning=FALSE, message=FALSE}
# Calculate relative abundances


# Agglomerate taxa genus 
floral_glom <- tax_glom(floral_micro_rel, taxrank = "Genus", NArm = FALSE)
floral_glom_melt <- psmelt(floral_glom)
floral_glom_melt$Genus <- as.character(floral_glom_melt$Genus)

# Calculating 
floral_gm_sum <- floral_glom_melt %>% 
  group_by(NAME, Genus, Treatment) %>% 
  summarise(Abundance = sum(Abundance))

floral_gm_sum <- floral_gm_sum %>% 
  mutate(Treatment = factor(Treatment, levels = c(25, 100, 200) )) %>% 
  mutate(Genus = case_when(Abundance < 3~ "< 3%",
                           TRUE ~ Genus) )

#ggplot
rel_abun_genus <- ggplot(floral_gm_sum, aes(NAME, Abundance, fill = Genus) ) +
  geom_bar(stat = "identity") + facet_wrap("Treatment", scales = "free_x") +
  theme_classic() + rotate_x_text() +
  labs(x = "Sample Name")
rel_abun_genus
```

```{r eval = FALSE, include=FALSE}
ggsave(filename = "RelativeAbundance_genus.jpg", path = "Figures/jpeg", 
       plot = rel_abun_genus, dpi = 600, width = 7, height = 5, units = "in")
```

# Diversity calculations

## Alpha diversity

```{r}
sample_data(floral_micro_filter)$Treatment <- 
  factor(sample_data(floral_micro_filter)$Treatment, levels = c(25, 100, 200))

richness <- estimate_richness(floral_micro_filter, 
                              measures = c("Chao1", "Simpson", "Shannon"))


plt_rich_chao1 <- plot_richness(floral_micro_filter, 
              measures = c("Chao1"), nrow = 3) +
  scale_color_aaas() + theme_bw() + rotate_x_text() +
  facet_wrap(variable~Treatment )
plt_rich_chao1

```

# Deseq2 analysis

## Remove poor represented ASV

In this case, since we are going to conduct comparative analysis, we need to remove ASV with less that 5 counts as well as to be detected in at least 50% of the samples. This yields to a total of 534 taxa that meet this two criteria.

```{r}
floral_micro_filter_5C <- genefilter_sample(floral_micro_filter,
                                            filterfun_sample(function(x) x > 5),
                                            A=0.5*nsamples(floral_micro_filter)
)

floral_micro_deseq <- prune_taxa(floral_micro_filter_5C, floral_micro_filter)
floral_micro_deseq
```

## Transform counts to a even depth

As we can see, 71080 is an intermediate sequencing depth for treatment. We are going to transform the count table from absolute counts to an homogeneous depth.

```{r}
meta(floral_micro_deseq) %>%
  group_by(Treatment) %>% 
  summarise(Depth_mean = mean(SeqDepth))
```

```{r}
floral_micro_relat <- transform_sample_counts(floral_micro_deseq,
                                              function(x) 71080 * x/(sum(x)))
```

## Keeping the 6 most abundant phyla

Only the six most abundant phyla are preserved for downstream analysis to remove low represented ASV.

This can be view in the Kronas plot and the Top Six Phylum are

-   Proteobacte

-   Actinobacteri

-   Bacteroid

-   Verrucomicrobi

-   Plantcomycet

```{r}
phylum_sum <- tapply(taxa_sums(floral_micro_relat),
                     tax_table(floral_micro_relat)[, "Phylum"], sum, na.rm = TRUE)

top5phyla <- names(sort(phylum_sum, decreasing = TRUE))[seq(6)]
top5phyla
```

```{r}
floral_micro_relat <- prune_taxa((tax_table(floral_micro_relat)[, "Phylum"] %in% top5phyla),
                                 floral_micro_relat)
floral_micro_relat
```

The final result yield us to a total of 456 ASV for downstream analysis.

## Transforming to Deseq2 object

```{r}

 phyloseq::sample_data(floral_micro_relat) <- meta(floral_micro_relat) %>% 
   mutate(Block = factor(Block, levels = seq(6) ),
          Time = factor(Time), 
          Treatment = factor(Treatment))
 
diagdds_floral <- phyloseq_to_deseq2(floral_micro_relat, 
                                     design =  ~Block + Treatment + Time + Treatment*Time)
```

```{r}
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds_floral), 1, gm_mean)

# Variance estimation
diagdds_floral = estimateSizeFactors(diagdds_floral, geoMeans = geoMeans)
diagdds_floral = estimateDispersions(diagdds_floral, fitType='local')

```

Extraction of the normalized matrix

```{r}
diagvst_floral = getVarianceStabilizedData(diagdds_floral)
dim(diagvst_floral)

```

Now, we can replace the normalized matrix for the absolute counts in the phyloseq object

```{r}
floral_micro_deseq_final <- floral_micro_rel
otu_table(floral_micro_deseq_final) <- otu_table(diagvst_floral, taxa_are_rows = TRUE)
```

## Differential ASV

Let's check first the design to make sure we have the right formula

```{r}
design(diagdds_floral)
```

```{r}
#Defining alpha level
alpha = 0.05

#Differential analysis
diagdds_floral <- DESeq(diagdds_floral, fitType = "local")
results_deseq <- results(diagdds_floral)
#results_deseq <- diagdds_floral[order(diagdds_floral$padj, na.last = NA), ]
resultsNames(diagdds_floral)

```

```{r}
sig_dif_asv <- results_deseq[which(results_deseq$padj < alpha), ]

sig_dif_asv <- cbind(as(sig_dif_asv,"data.frame"),
                      as(tax_table(floral_micro_deseq_final)[rownames(sig_dif_asv), ],
                         "matrix"))
sig_dif_asv <- remove_rownames(sig_dif_asv)
sig_dif_asv
```

# CCA analysis

## Preparing data

In this step, we are going to use the top 6 phyla

```{r}
## Extracting the community mattrix
comm_matrix =  as(otu_table(floral_micro_relat), "matrix")
comm_matrix = t(comm_matrix)
comm_matrix = as.data.frame(comm_matrix)

##Extracting the taxonomic matrix from the Phyloseq object
Taxonomy_id = as(tax_table(floral_micro_relat), "matrix")
Taxonomy_id = as.data.frame(Taxonomy_id)

## Preparing environmental data
env_data <- micro_metadata %>% 
  select(pH, EC..us.cm., TOC..mg.L., TN..mg.L., Sodium..ppm., Lithium..ppm., Potassium..ppm.,
         Magnesium..ppm., Calcium..ppm., Flouride..ppm., Chloride..ppm., Nitrate..ppm.,
         Sulfate..ppm., Phosphate..ppm., TotalShoot, RootTOShoot, RootDW) %>% 
  mutate_all(~replace_na(., 0))
# Remove L5 from env_data as not present
env_data <- env_data[-5, ]

# Assigning names to the genera
names(comm_matrix) <- Taxonomy_id$Genus

```

### Running CCA analysis

According to \`?vegan::vif.cca\`, variables produce variance inflation, which will decrease the sifnificance

of the analysis. As a rule of thumb, values over 10 indicate redundant constraints. Therefore,

Variables over 11, will be removed from the analysis.

```{r}
CCA_analysis_raw <- cca(comm_matrix ~ pH +EC..us.cm. +TOC..mg.L.+TN..mg.L.+Sodium..ppm.+Lithium..ppm.+Potassium..ppm.+Magnesium..ppm.+Calcium..ppm.+Flouride..ppm.+Chloride..ppm.+Nitrate..ppm.+Sulfate..ppm.+Phosphate..ppm.+RootTOShoot, data = env_data)
```

```{r}
data.frame(Values = vif.cca(CCA_analysis_raw)) %>% filter(Values < 11)
```

## Selecting environmental variables

The previous section pointed out three variables with low colinearity what we can include in a cleaner

CCA analysis.

```{r}

# Creating a null model
mod0 <- cca(comm_matrix ~ 1, data = env_data)
mod <- ordistep(mod0, scope = formula(CCA_analysis_raw), direction = "both", trace = 1 )
```

```{r}
plot(mod)
text(mod, "sites", col = "blue")
```

Here, we can see that only TOC, has a low p-val. However, this model do not accounts for any experimental design.

### Adding experimental design

PERMANOVA with the square root of dissimilarities (Bray-Curtis distances). Tests for the significance of the different terms of the model (the environmental variables).

First, we test all the variables to have an starting point for comparison with a p-value of 0.159

```{r}
adonis2(comm_matrix ~ pH +EC..us.cm. +TOC..mg.L.+TN..mg.L.+Sodium..ppm.+Lithium..ppm.+Potassium..ppm.+Magnesium..ppm.+Calcium..ppm.+Flouride..ppm.+Chloride..ppm.+Nitrate..ppm.+Sulfate..ppm.+Phosphate..ppm.+RootTOShoot, data = env_data, method = 'bray', by = NULL, sqrt.dist = TRUE)
```

Now, in the previous section, 3 variables showed low collinearity (EC, TOC, ROOT2SHOOT) and TOC showedhad a low p-value. Therefore, the best variables to create a new robust model are these three.

```{r}
adonis2(comm_matrix ~ EC..us.cm. + TOC..mg.L. + RootTOShoot, 
        data = env_data, method = 'bray', by = NULL, sqrt.dist = TRUE)
```

Surprisingly, the p-value increases which tell us the new model does not outperforms the initial model.

After some testing, these are the three best escenarios

```{r}
adonis2(comm_matrix ~ EC..us.cm. + TOC..mg.L. , 
        data = env_data, method = 'bray', by = NULL, sqrt.dist = TRUE)
```

```{r}
adonis2(comm_matrix ~ EC..us.cm. , 
        data = env_data, method = 'bray', by = NULL, sqrt.dist = TRUE)
```

```{r}
adonis2(comm_matrix ~ TOC..mg.L. , 
        data = env_data, method = 'bray', by = NULL, sqrt.dist = TRUE)
```

As we can see, the model with the lowest p-value is TOC. Unfortunately, we do not have environmental variables that are significantly driven differences in the data.

### Final CCA

From the last part, we did find any significant variables. However, for the final CCA analysis, we can include variables that although do not drive significant differences in the data (p-value \<0.05), can help us explain some diferencess between the samples. Therefore, we are heuristically including all variables that presented a p-value \> 0.2.

```{r}
CCA_analysis_final <- cca(comm_matrix ~EC..us.cm. + TOC..mg.L. + RootTOShoot+Calcium..ppm.+Potassium..ppm.+ TN..mg.L.+RootTOShoot+Nitrate..ppm., data = env_data)
CCA_analysis_final
```

### CCA diagnostics

Here, we will diagnose the goodnees of the fit of the environmental variables on the CCA. The previous analysis did not accounted for teh ASV distribution on a CCA space. Therefore, in this section, we will evaluate the the goodness of the env variables on the CCA.

```{r}
anova(CCA_analysis_final)
```

Here, we can see that our cca model is statistical significant, which means that are environmental variables that drive diferences.

```{r cache=TRUE}
anova(CCA_analysis_final, by='term', permutations = 9000)
```

Here, we can sEe that Calcium is the variables that causes the differentiation.

```{r cache=TRUE}
anova(CCA_analysis_final, by='axis', permutations = 9000)
```

According to this model, the CCA dimensions do not explain the diferences according the env variables. However, we will see later that CCA dimensions accounts for `Time`

```{r}
ordiplot(CCA_analysis_final)
```

```{r warning=FALSE}
cca_coordinates <- scores(CCA_analysis_final)
# Sample table
cca_samples <- cca_coordinates$sites %>% # Extracting the samples CCA coordinates
  as.data.frame %>% mutate(Samples = rownames(.))
# Adding metadata
sample_metadt <- micro_metadata %>% 
  select(Samples = NAME, Treatment, Time, Block) %>% 
  mutate(Treatment = factor(Treatment), Block = factor(Block), Time = factor(Time))

# Joining tables
cca_samples <- left_join(cca_samples, sample_metadt)


# ASV table
cca_asv <- cca_coordinates$species %>% as.data.frame %>% 
  mutate(Genus = rownames(.))
cca_asv_deseq2 <- left_join(sig_dif_asv, cca_asv)

# Env data
cca_env <- cca_coordinates$biplot %>% as.data.frame() %>% 
  mutate(Variable = rownames(.)) %>%
  mutate(Label = c("EC", "TOC", "R2S", "Ca*", "K", "TN", "NO3-"))
```

```{r}
# Base plot
cca_plot <- ggplot(cca_samples, aes(2*CCA1, 1.02*CCA2)) +
  #lims(x = c(-3, 2.5), y = c(-3, 7)) +
  geom_point( aes(color = Treatment, shape = Time), size = 3) +
  ggrepel::geom_text_repel(aes(label = Samples)) +
  ggsci::scale_color_startrek() +
  theme_void() +
  theme(legend.position = c(0.1, 0.75), 
        legend.background = element_rect(fill = "white", color = "white")) +
  theme(panel.grid = element_blank(), 
        panel.border = element_rect(fill= "transparent")) +
  geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
  geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
  # Adding env variables
  geom_segment(data = cca_env, aes(x = 0, y = 0,
                                   xend = 4.5*CCA1, yend = 4.5*CCA2),
               arrow = arrow(length =  unit(0.2, "cm")), 
               color = "mediumseagreen", linetype = 2) +
  ggrepel::geom_text_repel(data = cca_env,# box.padding = 0.5,
                           aes( 4.5*CCA1, 4.5*CCA2, label = Label),
                           color = "mediumseagreen") +
  # Adding all ASV and sig different ASV
  geom_point(data = cca_asv, aes(CCA1, CCA2), shape = 3, alpha = 0.2) +
  geom_point(data = cca_asv_deseq2, aes(CCA1, CCA2), shape = 3, color = "red") +
  ggrepel::geom_text_repel(data = cca_asv_deseq2, box.padding = 0.45,
                           aes(CCA1, CCA2, label = Genus))
cca_plot
```

```{r eval=FALSE, include=FALSE}
ggsave(filename = "CCA.jpg", path = "Figures/jpeg", 
       plot = cca_plot, dpi = 600, width = 7, height = 5, units = "in")
```

## Session info

```{r}
sessionInfo()
```
